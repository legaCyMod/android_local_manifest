From abcb7a29d50e85599a64acf1b7c6add0bdc5bf66 Mon Sep 17 00:00:00 2001
From: Konsta <konsta09@gmail.com>
Date: Tue, 18 Dec 2012 14:48:22 +0200
Subject: [PATCH 1/3] add battery bar (1/2)

Change-Id: I6a3f3028946829e4117a519c827bdd6d88912e1d
---
 core/java/android/provider/Settings.java           |   1 +
 packages/SystemUI/res/drawable/battery_bar.xml     |  29 ++++
 packages/SystemUI/res/layout/msim_status_bar.xml   |   6 +
 packages/SystemUI/res/layout/status_bar.xml        |   6 +
 packages/SystemUI/res/values/styles.xml            |   6 +
 .../systemui/statusbar/phone/BatteryBar.java       | 173 +++++++++++++++++++++
 .../systemui/statusbar/phone/PhoneStatusBar.java   |   4 +
 7 files changed, 225 insertions(+)
 create mode 100644 packages/SystemUI/res/drawable/battery_bar.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/phone/BatteryBar.java

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 97d7460..3b8e982 100755
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -3154,6 +3154,7 @@ public final class Settings {
          * 4: Hide the battery status information
          * 5: Display the battery an icon in landscape mode
          * 6: Display the battery as plain text
+         * 7: Show MIUI-style battery bar on the status bar
          * default: 0
          * @hide
          */
diff --git a/packages/SystemUI/res/drawable/battery_bar.xml b/packages/SystemUI/res/drawable/battery_bar.xml
new file mode 100644
index 0000000..38a03cd
--- /dev/null
+++ b/packages/SystemUI/res/drawable/battery_bar.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:id="@android:id/background"
+        android:drawable="@android:color/transparent" />
+
+    <item android:id="@android:id/secondaryProgress"
+        android:drawable="@android:color/transparent" />
+
+    <item android:id="@android:id/progress">
+        <clip>
+            <level-list xmlns:android="http://schemas.android.com/apk/res/android">
+                <item android:maxLevel="1500">
+                    <shape>
+                        <corners android:radius="5dip" />
+                        <solid android:color="@android:color/holo_red_dark" />
+                    </shape>
+                </item>
+                <item android:maxLevel="10000">
+                    <shape>
+                        <corners android:radius="5dip" />
+                        <solid android:color="@color/status_bar_clock_color" />
+                    </shape>
+                </item>
+            </level-list>
+        </clip>
+    </item>
+
+</layer-list>
diff --git a/packages/SystemUI/res/layout/msim_status_bar.xml b/packages/SystemUI/res/layout/msim_status_bar.xml
index ecc9134..b05c718 100644
--- a/packages/SystemUI/res/layout/msim_status_bar.xml
+++ b/packages/SystemUI/res/layout/msim_status_bar.xml
@@ -187,4 +187,10 @@
                 />
         </com.android.systemui.statusbar.phone.TickerView>
     </LinearLayout>
+
+    <com.android.systemui.statusbar.phone.BatteryBar
+        style="@style/StatusBar.BatteryBar"
+        android:layout_width="match_parent"
+        android:layout_height="1.5dp" />
+
 </com.android.systemui.statusbar.phone.PhoneStatusBarView>
diff --git a/packages/SystemUI/res/layout/status_bar.xml b/packages/SystemUI/res/layout/status_bar.xml
index 488a0bb..926c95d 100644
--- a/packages/SystemUI/res/layout/status_bar.xml
+++ b/packages/SystemUI/res/layout/status_bar.xml
@@ -185,4 +185,10 @@
                 />
         </com.android.systemui.statusbar.phone.TickerView>
     </LinearLayout>
+
+    <com.android.systemui.statusbar.phone.BatteryBar
+        style="@style/StatusBar.BatteryBar"
+        android:layout_width="match_parent"
+        android:layout_height="1.5dp" />
+
 </com.android.systemui.statusbar.phone.PhoneStatusBarView>
diff --git a/packages/SystemUI/res/values/styles.xml b/packages/SystemUI/res/values/styles.xml
index 8b77ebd..c3231e4 100644
--- a/packages/SystemUI/res/values/styles.xml
+++ b/packages/SystemUI/res/values/styles.xml
@@ -184,4 +184,10 @@
         <item name="android:textSize">14dp</item>
     </style>
     
+    <style name="StatusBar.BatteryBar"
+        parent="@android:style/Widget.ProgressBar.Horizontal">
+        <item name="android:progressDrawable">@drawable/battery_bar</item>
+        <item name="android:minHeight">1dip</item>
+        <item name="android:maxHeight">1dip</item>
+    </style>
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/BatteryBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/BatteryBar.java
new file mode 100644
index 0000000..50b3ea3
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/BatteryBar.java
@@ -0,0 +1,173 @@
+package com.android.systemui.statusbar.phone;
+
+import android.content.BroadcastReceiver;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.database.ContentObserver;
+import android.graphics.drawable.Animatable;
+import android.os.BatteryManager;
+import android.os.Handler;
+import android.provider.Settings;
+import android.util.AttributeSet;
+import android.widget.ProgressBar;
+
+public class BatteryBar extends ProgressBar implements Animatable, Runnable {
+
+    private static final String TAG = BatteryBar.class.getSimpleName();
+
+    // Total animation duration
+    private static final int ANIM_DURATION = 10000; // 10 seconds
+
+    // Duration between frames of charging animation
+    private static final int FRAME_DURATION = ANIM_DURATION / 100;
+
+    // Are we listening for actions?
+    private boolean mAttached = false;
+
+    // Should we show this?
+    private boolean mShowBatteryBar = false;
+
+    // Current battery level
+    private int mBatteryLevel = 0;
+
+    // Current "step" of charging animation
+    private int mChargingLevel = -1;
+
+    // Are we charging?
+    private boolean mBatteryCharging = false;
+
+    private Handler mHandler = new Handler();
+
+    class SettingsObserver extends ContentObserver {
+
+        public SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observer() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(
+                    Settings.System.getUriFor(Settings.System.STATUS_BAR_BATTERY), false, this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            updateSettings();
+        }
+    }
+
+    public BatteryBar(Context context) {
+        this(context, null);
+    }
+
+    public BatteryBar(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public BatteryBar(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+
+        SettingsObserver observer = new SettingsObserver(mHandler);
+        observer.observer();
+        updateSettings();
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+
+        if (!mAttached) {
+            mAttached = true;
+            IntentFilter filter = new IntentFilter();
+            filter.addAction(Intent.ACTION_BATTERY_CHANGED);
+            filter.addAction(Intent.ACTION_SCREEN_OFF);
+            filter.addAction(Intent.ACTION_SCREEN_ON);
+            getContext().registerReceiver(mIntentReceiver, filter, null, getHandler());
+        }
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+
+        if (mAttached) {
+            mAttached = false;
+            getContext().unregisterReceiver(mIntentReceiver);
+        }
+    }
+
+    private final BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+            if (Intent.ACTION_BATTERY_CHANGED.equals(action)) {
+                mBatteryLevel = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, 0);
+                mBatteryCharging = intent.getIntExtra(BatteryManager.EXTRA_STATUS, 0) == BatteryManager.BATTERY_STATUS_CHARGING;
+                if (mBatteryCharging && mBatteryLevel < 100) {
+                    start();
+                } else {
+                    stop();
+                }
+            } else if (Intent.ACTION_SCREEN_OFF.equals(action)) {
+                stop();
+            } else if (Intent.ACTION_SCREEN_ON.equals(action)) {
+                if (mBatteryCharging && mBatteryLevel < 100) {
+                    start();
+                }
+            }
+        }
+    };
+
+    private void updateSettings() {
+        ContentResolver resolver = mContext.getContentResolver();
+        mShowBatteryBar = (Settings.System.getInt(resolver,
+                Settings.System.STATUS_BAR_BATTERY, 0) == 7);
+        if (mShowBatteryBar) {
+            setVisibility(VISIBLE);
+        } else {
+            setVisibility(GONE);
+        }
+
+        if (mBatteryCharging && mBatteryLevel < 100) {
+            start();
+        } else {
+            stop();
+        }
+    }
+
+    @Override
+    public void run() {
+        mChargingLevel++;
+        if (mChargingLevel > 100) {
+            mChargingLevel = mBatteryLevel;
+        }
+        setProgress(mChargingLevel);
+        mHandler.postDelayed(this, FRAME_DURATION);
+    }
+
+    @Override
+    public void start() {
+        if (!isRunning()) {
+            mHandler.removeCallbacks(this);
+            mChargingLevel = mBatteryLevel;
+            mHandler.postDelayed(this, FRAME_DURATION);
+        }
+    }
+
+    @Override
+    public void stop() {
+        if (isRunning()) {
+            mHandler.removeCallbacks(this);
+            mChargingLevel = -1;
+        }
+        setProgress(mBatteryLevel);
+    }
+
+    @Override
+    public boolean isRunning() {
+        return mChargingLevel != -1;
+    }
+
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index 287af65..9aa62ef 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -3353,6 +3353,10 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
                 mode = BatteryMeterMode.BATTERY_METER_TEXT;
                 break;
 
+            case 7:
+                mode = BatteryMeterMode.BATTERY_METER_GONE;
+                break;
+
             default:
                 break;
         }
-- 
2.5.0

